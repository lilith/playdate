generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Pronoun {
  FAE_FAER_FAERS
  EEY_EM_EIRS
  HE_HIM_HIS
  PER_PER_PERS
  SHE_HER_HERS
  THEY_THEM_THEIRS
  VE_VER_VIS
  XE_XEM_XYRS
  ZEZIE_HIR_HIRS
}

model Household {
  id                   Int                    @id @default(autoincrement())
  name                 String
  publicNotes          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  AvailabilityDate     AvailabilityDate[]
  FriendRequest        FriendRequest[]
  user                 Household              @relation("householdFriends", fields: [id], references: [id])
  friends              Household?             @relation("householdFriends")
  children             HouseholdChild[]
  friendsHousehold     HouseholdConnection?   @relation("friendHousehold")
  usersHousehold       HouseholdConnection?   @relation("household")
  JoinHouseholdRequest JoinHouseholdRequest[]
  parents              User[]
}

model FriendRequest {
  id              Int       @id @default(autoincrement())
  expires         DateTime?
  targetPhone     String
  fromUserId      Int
  fromHouseholdId Int
  createdAt       DateTime  @default(now())
  fromHousehold   Household @relation(fields: [fromHouseholdId], references: [id])
  fromUser        User      @relation(fields: [fromUserId], references: [id])
}

model JoinHouseholdRequest {
  id          Int       @id @default(autoincrement())
  expires     DateTime?
  targetPhone String
  householdId Int
  fromUserId  Int
  createdAt   DateTime  @default(now())
  fromUser    User      @relation(fields: [fromUserId], references: [id])
  household   Household @relation(fields: [householdId], references: [id])
}

model HouseholdChild {
  id               Int                @id @default(autoincrement())
  householdId      Int
  firstName        String
  pronouns         Pronoun
  lastName         String?
  dateOfBirth      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  AvailabilityDate AvailabilityDate[]
  household        Household          @relation(fields: [householdId], references: [id])
}

model MagicLink {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  phone     String
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([token])
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  phone     String
  expires   DateTime
  createdAt DateTime @default(now())
}

model PhoneContactPermissions {
  phone           String    @id
  blocked         Boolean
  allowInvites    Boolean
  allowReminders  Boolean
  acceptedTermsAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  User            User?
}

model User {
  id                         Int                     @id @default(autoincrement())
  householdId                Int?
  locale                     String
  firstName                  String
  lastName                   String?
  phone                      String                  @unique
  timeZone                   String
  pronouns                   Pronoun
  locked                     Boolean                 @default(false)
  lockedReason               String?
  email                      String?
  emailVerified              String?
  reminderDatetime           DateTime
  reminderIntervalDays       Int
  acceptedTermsAt            DateTime
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  AvailabilityDate           AvailabilityDate[]
  inboxFriendRequestsPartial FriendRequest[]
  inboxHouseholdJoinRequests JoinHouseholdRequest[]
  household                  Household?              @relation(fields: [householdId], references: [id])
  phonePermissions           PhoneContactPermissions @relation(fields: [phone], references: [phone])

  @@index([phone])
}

model AvailabilityDate {
  id          Int                @id @default(autoincrement())
  householdId Int
  parentId    Int?
  childId     Int?
  date        DateTime
  status      AvailabilityStatus @default(UNSPECIFIED)
  startTime   DateTime
  endTime     DateTime
  notes       String?
  emoticons   String?
  updatedAt   DateTime           @updatedAt
  createdAt   DateTime           @default(now())
  child       HouseholdChild?    @relation(fields: [childId], references: [id])
  household   Household          @relation(fields: [householdId], references: [id])
  parent      User?              @relation(fields: [parentId], references: [id])
}

model HouseholdConnection {
  id                Int       @id @default(autoincrement())
  householdId       Int       @unique
  friendHouseholdId Int       @unique
  createdAt         DateTime  @default(now())
  friendHousehold   Household @relation("friendHousehold", fields: [friendHouseholdId], references: [id])
  household         Household @relation("household", fields: [householdId], references: [id])
}

enum AvailabilityStatus {
  UNSPECIFIED
  BUSY
  AVAILABLE
}
